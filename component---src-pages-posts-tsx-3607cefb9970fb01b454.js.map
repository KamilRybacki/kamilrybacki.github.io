{"version":3,"file":"component---src-pages-posts-tsx-3607cefb9970fb01b454.js","mappings":"qLAGMA,E,MAAqBC,GAAAA,KAAHC,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,CAAAA,iECDxB,EDUqB,SAAC,GAAgB,IAAfC,EAAc,EAAdA,SACtB,OACCC,EAAAA,cAACJ,EAAD,KACEG,K,sHENEE,EAAcJ,GAAAA,CAAGK,EAAAA,GAAHL,CAAHC,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,CAAAA,mTAiBXK,EAAqBN,IAAAA,IAAHO,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,CAAAA,4DAOlBC,EAAYR,IAAAA,GAAHS,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,CAAAA,0DAOTC,EAAWV,IAAAA,KAAHW,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,CAAAA,6DAORC,EAAqBZ,IAAAA,IAAHa,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,CAAAA,8GAQlBC,EAAcd,IAAAA,EAAHe,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,CAAAA,2GCrDjB,ED+DyD,SAAC,GAAkB,IAAjBC,EAAgB,EAAhBA,KAAMC,EAAU,EAAVA,KAahE,OACOd,EAAAA,cAACe,EAAAA,GAAD,CACEC,MAdY,aAelBC,OAAU,SAACC,GACZ,OACClB,EAAAA,cAACC,EAAD,CAAakB,GAAE,UAAYN,EAAKO,MAC/BpB,EAAAA,cAACG,EAAD,KACCH,EAAAA,cAACK,EAAD,KAAYQ,EAAKQ,YAAYC,OAC7BtB,EAAAA,cAACO,EAAD,KAAWM,EAAKQ,YAAYE,OAGG,SAA/BV,EAAKQ,YAAYG,UAAuBxB,EAAAA,cAAAA,EAAAA,SAAAA,KACvCA,EAAAA,cAACS,EAAD,CAAoBgB,IACnBP,EAAYQ,QAAQC,MAAMC,KAAI,SAACC,GAC7B,GAAIA,EAAKC,KAAKC,UAAUC,SAASnB,EAAKQ,YAAYG,YAC9CK,EAAKC,KAAKG,aAAaD,SAASlB,GAClC,OAAOe,EAAKC,KAAKC,aAEhBG,OAAQC,SAAU,KACrBnC,EAAAA,cAACW,EAAD,KACDE,EAAKQ,YAAYe,UAAYvB,EAAKwB,UAChBrC,EAAAA,cAACW,EAAD,CAAa2B,UAAU,SACzCzB,EAAKQ,YAAYe,UAAYvB,EAAKwB,e,+EElG3C,E,MCAqBxC,GAAAA,GAAHC,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,CAAAA,4D,4FC6ClB,UAnBkB,WACjB,OACCE,EAAAA,cAACuC,EAAAA,EAAD,KACCvC,EAAAA,cAACwC,EAAAA,EAAD,cACGxC,EAAAA,cAACyC,EAAAA,EAAD,KACEzC,EAAAA,cAACe,EAAAA,GAAD,CACEC,MA1BO,aA2BPC,OAAQ,SAACyB,GAEP,OADcA,EAAaC,OAAOC,MAE1BhB,KAAI,SAACiB,GAAD,OAAkB7C,EAAAA,cAAC8C,EAAAA,EAAD,CAAUjC,KAAMgC,EAAME,IAAKF,EAAKG,GAAIlC,KAAK","sources":["webpack://kamilrybacki/./src/components/CardsWrapper/CardsWrapper.tsx","webpack://kamilrybacki/./src/components/CardsWrapper/index.ts","webpack://kamilrybacki/./src/components/PostCard/PostCard.tsx","webpack://kamilrybacki/./src/components/PostCard/index.ts","webpack://kamilrybacki/./src/components/SubpageTitle/index.ts","webpack://kamilrybacki/./src/components/SubpageTitle/SubpageTitle.tsx","webpack://kamilrybacki/./src/pages/posts.tsx"],"sourcesContent":["import React from \"react\";\nimport tw from \"tailwind-styled-components\";\n\nconst CardsWrapperLayout = tw.main`\n\tw-full\n\tflex\n\tgap-6\n\n\tflex-col\n\tmd:flex-row\n`\n\nconst CardsWrapper = ({children}) => {\n\treturn(\n\t\t<CardsWrapperLayout>\n\t\t\t{children}\n\t\t</CardsWrapperLayout>\n\t)\n}\n\nexport default CardsWrapper","import CardsWrapper from \"./CardsWrapper\";\n\nexport default CardsWrapper","import React from \"react\";\nimport { graphql, Link, StaticQuery } from \"gatsby\"\nimport tw from \"tailwind-styled-components\"\n\ntype PostCardProps = {\n\tdata: object\n\ttype: string\n}\n\nconst CardWrapper = tw(Link)`\n\tp-5\n\tborder-2\n\tduration-500\n\tshadow-[0.5rem_0.5rem_0_rgb(0,0,0)]\n\tbg-secondary-500\n\n\thover:translate-x-[0.25rem]\n\thover:translate-y-[0.25rem]\n\thover:shadow-[0.25rem_0.25rem_0_rgb(0,0,0)]\n\thover:child:shadow-none\n\thover:child:border-0\n\thover:child:duration-100\n\n\tmd:w-1/3\n`\n\nconst FrontmatterWrapper = tw.div`\n\tflex\n\tjustify-between\n\talign-middle\n\tmb-4\n`\n\nconst PostTitle = tw.h1`\n\tfont-heading\n\tfont-bold\n\ttext-2xl\n\tmr-5\n`\n\nconst PostDate = tw.span`\n\tpy-2\n\tfont-sans\n\ttext-sm\n\ttext-primary-200\n`\n\nconst ThumbnailMiniature = tw.img`\n\tmt-1\n\tmb-3\n\tborder-b-[0.25rem]\n\tborder-r-[0.25rem]\n\tshadow-[-0.1rem_-0.1rem_0_rgb(0,0,0)]\n`\n\nconst PostExcerpt = tw.p`\n\ttext-justify\n\tfont-sans\n\ttext-sm\n\ttext-primary-400\n\tp-1\n\toverflow-x-hidden\n\th-full\n`\n\nconst PostCard: React.FunctionComponent<PostCardProps> = ({data, type}) => {\n\tconst thumbnailsQuery = graphql`\n\t\tquery MiniatureQuery {\n\t\t\tallFile(filter: {relativePath: {regex: \"/thumbnails/\"}}) {\n\t\t\t\tedges {\n\t\t\t\t\tnode {\n\t\t\t\t\t\tabsolutePath\n\t\t\t\t\t\tpublicURL\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t`\n\treturn(\n        <StaticQuery\n          query={thumbnailsQuery}\n\t\t  render = {(queryResult) => {\n\t\t\treturn(\n\t\t\t\t<CardWrapper to={`/posts/${data.slug}`}>\n\t\t\t\t\t<FrontmatterWrapper>\n\t\t\t\t\t\t<PostTitle>{data.frontmatter.title}</PostTitle>\n\t\t\t\t\t\t<PostDate>{data.frontmatter.date}</PostDate>\n\t\t\t\t\t</FrontmatterWrapper> \n\t\t\t\t\t{\n\t\t\t\t\t\tdata.frontmatter.thumbnail !== 'none' ? <>\n\t\t\t\t\t\t\t<ThumbnailMiniature src={\n\t\t\t\t\t\t\t\tqueryResult.allFile.edges.map((edge: object) => {\n\t\t\t\t\t\t\t\t\t\tif (edge.node.publicURL.includes(data.frontmatter.thumbnail)\n\t\t\t\t\t\t\t\t\t\t\t&& edge.node.absolutePath.includes(type)){\n\t\t\t\t\t\t\t\t\t\t\t\treturn edge.node.publicURL\n\t\t\t\t\t\t\t\t\t\t} \n\t\t\t\t\t\t\t\t\t} ).filter( Boolean )[0]\n\t\t\t\t\t\t\t}/><PostExcerpt>\n\t\t\t\t\t\t\t\t{data.frontmatter.abstract || data.excerpt}\n\t\t\t\t\t\t\t</PostExcerpt></> : <PostExcerpt className=\"mt-10\">\n\t\t\t\t\t\t\t\t{data.frontmatter.abstract || data.excerpt}\n\t\t\t\t\t\t\t</PostExcerpt>  \n\t\t\t\t\t}\n\t\t\t\t</CardWrapper>\n\t\t\t)\n\t\t  }}\n\t\t/>\n\t)\n}\n\nexport default PostCard\n","import PostCard from \"./PostCard\";\n\nexport default PostCard","import SubpageTitle from \"./SubpageTitle\"\n\nexport default SubpageTitle","import tw from \"tailwind-styled-components\"\n\nconst SubpageTitle = tw.h1`\n\ttext-4xl\n\tfont-heading\n\tunderline\n\tmb-10\n`\n\nexport default SubpageTitle","import React from \"react\"\nimport { graphql, StaticQuery } from \"gatsby\"\n\nimport CardsWrapper from \"@components/CardsWrapper\"\nimport PostCard from \"@components/PostCard\" \nimport PageWrapper from \"@components/PageWrapper\" \nimport SubpageTitle from \"@components/SubpageTitle\"\n\nconst posts_query = graphql`\n  query PostsQuery {\n    allMdx(\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: {fileAbsolutePath: {regex: \"/\\/posts\\//\"}}\n    ) {\n      nodes {\n        id\n        excerpt(pruneLength: 250)\n        frontmatter {\n          title\n          date(formatString: \"YYYY MMMM Do\")\n          thumbnail\n        }\n        slug\n      }\n    }\n  }\n`\n\nconst PostsPage = () => {\n\treturn(\n\t\t<PageWrapper>\n\t\t\t<SubpageTitle>Posts</SubpageTitle>\n      <CardsWrapper>\n        <StaticQuery\n          query={posts_query}\n          render={(query_result: object) => {\n            const posts = query_result.allMdx.nodes\n            return(\n              posts.map((post: object) => <PostCard data={post} key={post.id} type=\"posts\"/>)\n            )\n          }}\n        />\n      </CardsWrapper>\n\t\t</PageWrapper>\n\t)\n} \n\nexport default PostsPage\n"],"names":["CardsWrapperLayout","tw","_templateObject","children","React","CardWrapper","Link","FrontmatterWrapper","_templateObject2","PostTitle","_templateObject3","PostDate","_templateObject4","ThumbnailMiniature","_templateObject5","PostExcerpt","_templateObject6","data","type","StaticQuery","query","render","queryResult","to","slug","frontmatter","title","date","thumbnail","src","allFile","edges","map","edge","node","publicURL","includes","absolutePath","filter","Boolean","abstract","excerpt","className","PageWrapper","SubpageTitle","CardsWrapper","query_result","allMdx","nodes","post","PostCard","key","id"],"sourceRoot":""}