{"version":3,"file":"component---src-pages-projects-tsx-45935feb579bc32a2015.js","mappings":"qLAEMA,E,MAAqBC,GAAAA,KAAH,eAAxB,2ECAA,ECOiE,SAAC,GAAgB,IAAfC,EAAc,EAAdA,SACjE,OACE,uBADF,K,sHCPIC,EAAcF,GAAAA,CAAH,KAAGA,CAAH,eAAjB,0NAcMG,EAAqBH,IAAAA,IAAH,eAAxB,oEAOMI,EAAYJ,IAAAA,GAAH,eAAf,iFAQMK,EAAWL,IAAAA,KAAH,eAAd,qEAOMM,EAAqBN,IAAAA,IAAH,eAAxB,6BAKMO,EAAcP,IAAAA,EAAH,eAAjB,yHC1CA,ECYyD,SAAC,GAAkB,IAAjBQ,EAAgB,EAAhBA,KAAMC,EAAU,EAAVA,KAa/D,OAEE,sBACEC,MAfJ,aAgBIC,OAAU,YACR,OACE,mBAAaC,GAAE,UAAcJ,EAAKK,MAChC,uBACE,uBAAYL,EAAAA,YADd,OAEE,6BAAcA,EAAAA,YAHlB,OAMM,SAAAA,EAAA,sBAAwC,gCACtC,mBAAoBM,IAClBC,EAAA,mBAA8B,YAC5B,IAAMC,EAAYR,EAAAA,YAAlB,UAEA,GADkBS,EAAAA,KAAAA,UAAAA,SAAlB,IACiBA,EAAAA,KAAAA,aAAAA,SAAjB,GACE,OAAOA,EAAAA,KAAP,aAJJ,qBAOC,uBACAT,EAAAA,YAAAA,UAA6BA,EAVlC,UAWsB,mBAAaU,UAAU,SACxCV,EAAAA,YAAAA,UAA6BA,EAnB1C,e,iHCrBFW,EAAenB,IAAAA,GAAH,eAAlB,8GAyDA,UAzBqB,WACnB,OACE,gCACE,yBACE,uBADF,eAEE,yBACE,sBACEU,MA9BZ,aA+BYC,OAAQ,YAEN,OADcI,EAAAA,OAAd,MAEE,KAAU,YACR,OACE,qBAAUP,KAAV,EAAsBY,IAAKC,EAA3B,GAAoCZ,KAAK","sources":["webpack://kamilrybacki/./src/components/CardsWrapper/style.ts","webpack://kamilrybacki/./src/components/CardsWrapper/index.ts","webpack://kamilrybacki/./src/components/CardsWrapper/CardsWrapper.tsx","webpack://kamilrybacki/./src/components/PostCard/style.ts","webpack://kamilrybacki/./src/components/PostCard/index.ts","webpack://kamilrybacki/./src/components/PostCard/PostCard.tsx","webpack://kamilrybacki/./src/pages/projects.tsx"],"sourcesContent":["import tw from 'tailwind-styled-components';\n\nconst CardsWrapperLayout = tw.main`\n    w-full\n    flex\n    gap-6\n\n    flex-col\n    md:flex-row\n`;\n\nexport {CardsWrapperLayout};\n","import CardsWrapper from './CardsWrapper';\n\nexport default CardsWrapper;\n","import React from 'react';\n\nimport {CardsWrapperLayout} from './style';\n\ntype CardsWrapperProps = {\n  children: JSX.Element | JSX.Element[]\n}\n\n// eslint-disable-next-line max-len\nconst CardsWrapper: React.FunctionComponent<CardsWrapperProps> = ({children}) => {\n  return (\n    <CardsWrapperLayout>\n      {children}\n    </CardsWrapperLayout>\n  );\n};\n\nexport default CardsWrapper;\n","import tw from 'tailwind-styled-components';\nimport {Link} from 'gatsby';\n\nconst CardWrapper = tw(Link)`\n    p-5\n    border-2\n    duration-300\n    bg-secondary-50\n\n    hover:-translate-x-[0.5rem]\n    hover:-translate-y-[0.5rem]\n    hover:shadow-[0.25rem_0.25rem_0_rgb(0,0,0)]\n\n    md:w-1/2\n    lg:w-1/4\n`;\n\nconst FrontmatterWrapper = tw.div`\n    flex\n    justify-between\n    align-middle\n    mb-4\n`;\n\nconst PostTitle = tw.h1`\n    font-heading\n    font-bold\n    text-2xl\n    underline\n    mr-5\n`;\n\nconst PostDate = tw.span`\n    py-2\n    font-sans\n    text-sm\n    text-primary-200\n`;\n\nconst ThumbnailMiniature = tw.img`\n    mt-1\n    mb-5\n`;\n\nconst PostExcerpt = tw.p`\n    text-justify\n    font-sans\n    text-sm\n    text-primary-400\n    p-1\n    overflow-x-hidden\n    h-full\n`;\n\nexport {CardWrapper, FrontmatterWrapper,\n  PostTitle, PostDate, PostExcerpt, ThumbnailMiniature};\n","import PostCard from './PostCard';\n\nexport default PostCard;\n","import React from 'react';\nimport {graphql, StaticQuery} from 'gatsby';\n\nimport {CardWrapper, FrontmatterWrapper,\n  PostTitle, PostDate, PostExcerpt, ThumbnailMiniature} from './style';\n\n// @ts-ignore\nimport {MiniaturesQuery, Edge, Mdx} from '@root/graphql-types';\n\ntype PostCardProps = {\n    data: Mdx\n    type: string\n}\n\nconst PostCard: React.FunctionComponent<PostCardProps> = ({data, type}) => {\n  const miniaturesQuery = graphql`\n        query Miniatures {\n            allFile(filter: {relativePath: {regex: \"/thumbnails/\"}}) {\n                edges {\n                    node {\n                        absolutePath\n                        publicURL\n                    }\n                }\n            }\n        }\n    `;\n  return (\n    // @ts-ignore\n    <StaticQuery\n      query={miniaturesQuery}\n      render = {(queryResult: MiniaturesQuery) => {\n        return (\n          <CardWrapper to={`/${type}/${data.slug}`}>\n            <FrontmatterWrapper>\n              <PostTitle>{data.frontmatter.title}</PostTitle>\n              <PostDate>ðŸ•‘ {data.frontmatter.date}</PostDate>\n            </FrontmatterWrapper>\n            {\n                data.frontmatter.thumbnail !== 'none' ? <>\n                  <ThumbnailMiniature src={\n                    queryResult.allFile.edges.map((edge: Edge) => {\n                      const thumbnail = data.frontmatter.thumbnail;\n                      const isPresent = edge.node.publicURL.includes(thumbnail);\n                      if (isPresent && edge.node.absolutePath.includes(type)) {\n                        return edge.node.publicURL;\n                      }\n                    } ).filter( Boolean )[0]\n                  }/><PostExcerpt>\n                    {data.frontmatter.abstract || data.excerpt}\n                  </PostExcerpt></> : <PostExcerpt className=\"mt-10\">\n                    {data.frontmatter.abstract || data.excerpt}\n                  </PostExcerpt>\n            }\n          </CardWrapper>\n        );\n      }}\n    />\n  );\n};\n\nexport default PostCard;\n","// @ts-nocheck\nimport React from 'react';\nimport {graphql, StaticQuery} from 'gatsby';\nimport tw from 'tailwind-styled-components';\n\nimport CardsWrapper from '@components/CardsWrapper';\nimport PostCard from '@components/PostCard';\nimport PageWrapper from '@components/PageWrapper';\n\nimport {ProjectsQuery, Node} from '@root/graphql-types';\n\nconst SubpageTitle = tw.h1`\n    text-5xl\n    font-heading\n    font-bold\n    text-accent-500\n    tracking-tighter\n    mb-10\n`;\n\nconst projectsQuery = graphql`\n  query Projects {\n    allMdx(\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: {fileAbsolutePath: {regex: \"/\\/projects\\//\"}}\n    ) {\n      nodes {\n        id\n        excerpt(pruneLength: 250)\n        frontmatter {\n          title\n          date(formatString: \"DD/MM/YY\")\n          thumbnail\n          gallery\n          techs\n          abstract\n        }\n        slug\n      }\n    }\n  }\n`;\n\nconst ProjectsPage = () => {\n  return (\n    <>\n      <PageWrapper>\n        <SubpageTitle>My projects</SubpageTitle>\n        <CardsWrapper>\n          <StaticQuery\n            query={projectsQuery}\n            render={(queryResult: ProjectsQuery) => {\n              const posts = queryResult.allMdx.nodes;\n              return (\n                posts.map((post: Node) => {\n                  return (\n                    <PostCard data={post} key={post.id} type=\"projects\"/>\n                  );\n                })\n              );\n            }}\n          />\n        </CardsWrapper>\n      </PageWrapper>\n    </>\n  );\n};\n\nexport default ProjectsPage;\n"],"names":["CardsWrapperLayout","tw","children","CardWrapper","FrontmatterWrapper","PostTitle","PostDate","ThumbnailMiniature","PostExcerpt","data","type","query","render","to","slug","src","queryResult","thumbnail","edge","className","SubpageTitle","key","post"],"sourceRoot":""}