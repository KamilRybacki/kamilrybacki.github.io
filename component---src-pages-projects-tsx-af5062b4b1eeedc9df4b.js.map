{"version":3,"file":"component---src-pages-projects-tsx-af5062b4b1eeedc9df4b.js","mappings":"qLAGMA,E,MAAqBC,GAAAA,KAAHC,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,CAAAA,oCCDxB,EDOqB,SAAC,GAAgB,IAAfC,EAAc,EAAdA,SACtB,OACCC,EAAAA,cAACJ,EAAD,KACEG,K,sHEDEE,EAAcJ,GAAAA,CAAGK,EAAAA,GAAHL,CAAHC,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,CAAAA,8OAaXK,EAAqBN,IAAAA,IAAHO,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,CAAAA,oDAMlBC,EAAYR,IAAAA,GAAHS,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,CAAAA,0DAOTC,EAAWV,IAAAA,KAAHW,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,CAAAA,6DAORC,EAAqBZ,IAAAA,IAAHa,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,CAAAA,qCAMlBC,EAAcd,IAAAA,EAAHe,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,CAAAA,2GChDjB,ED0DyD,SAAC,GAAkB,IAAjBC,EAAgB,EAAhBA,KAAMC,EAAU,EAAVA,KAahE,OACOd,EAAAA,cAACe,EAAAA,GAAD,CACEC,MAdY,aAelBC,OAAU,SAACC,GACZ,IAAMC,EAAoBD,EAAaE,QAAQC,MAAMC,KACpD,SAACC,GACA,GAAIA,EAAKC,KAAKC,UAAUC,SAASb,EAAKc,YAAYC,YAC9CL,EAAKC,KAAKK,aAAaH,SAASZ,GAElC,OADAgB,QAAQC,IAAIR,EAAKC,KAAKC,WACfF,EAAKC,KAAKC,aAGnBO,OAAQC,SACV,OACCjC,EAAAA,cAACC,EAAD,CAAaiC,GAAE,UAAYrB,EAAKsB,MAC/BnC,EAAAA,cAACG,EAAD,KACCH,EAAAA,cAACK,EAAD,KAAYQ,EAAKc,YAAYS,OAC7BpC,EAAAA,cAACO,EAAD,KAAWM,EAAKc,YAAYU,OAE7BrC,EAAAA,cAACS,EAAD,CAAoB6B,IAAKnB,EAAkB,KAC3CnB,EAAAA,cAACW,EAAD,KAAcE,EAAK0B,e,+EE3FxB,E,MCEqB1C,GAAAA,GAAHC,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,CAAAA,4D,4FCgDlB,UArBkB,WACjB,OACGE,EAAAA,cAAAA,EAAAA,SAAAA,KACEA,EAAAA,cAACwC,EAAAA,EAAD,KACExC,EAAAA,cAACyC,EAAAA,EAAD,cACAzC,EAAAA,cAAC0C,EAAAA,EAAD,KACE1C,EAAAA,cAACe,EAAAA,GAAD,CACEC,MA7BK,aA8BLC,OAAQ,SAACC,GAEP,OADcA,EAAayB,OAAOC,MAE1BtB,KAAI,SAACuB,GAAD,OAA8B7C,EAAAA,cAAC8C,EAAAA,EAAD,CAAUjC,KAAMgC,EAAME,IAAKF,EAAKG,GAAIlC,KAAK","sources":["webpack://kamilrybacki/./src/components/CardsWrapper/CardsWrapper.tsx","webpack://kamilrybacki/./src/components/CardsWrapper/index.ts","webpack://kamilrybacki/./src/components/PostCard/PostCard.tsx","webpack://kamilrybacki/./src/components/PostCard/index.ts","webpack://kamilrybacki/./src/components/SubpageTitle/index.ts","webpack://kamilrybacki/./src/components/SubpageTitle/SubpageTitle.tsx","webpack://kamilrybacki/./src/pages/projects.tsx"],"sourcesContent":["import React from \"react\";\nimport tw from 'tailwind-styled-components';\n\nconst CardsWrapperLayout = tw.main`\n\tw-full\n\tflex\n\tgap-6\n`\n\nconst CardsWrapper = ({children}) => {\n\treturn(\n\t\t<CardsWrapperLayout>\n\t\t\t{children}\n\t\t</CardsWrapperLayout>\n\t)\n}\n\nexport default CardsWrapper","import CardsWrapper from \"./CardsWrapper\";\n\nexport default CardsWrapper","import React from \"react\";\nimport { graphql, Link, StaticQuery } from \"gatsby\"\nimport tw from 'tailwind-styled-components'\n\nimport { Dictionary } from \"@src/types\"\n\ntype PostCardProps = {\n\tdata: Dictionary<string>\n\ttype: string\n}\n\nconst CardWrapper = tw(Link)`\n\tp-5\n\tw-[25rem]\n\th-[25rem]\n\tborder-2\n\tduration-500\n\tshadow-[0.5rem_0.5rem_0_rgb(0,0,0)]\n\thover:translate-x-[0.25rem]\n\thover:translate-y-[0.25rem]\n\thover:shadow-[0.25rem_0.25rem_0_rgb(0,0,0)]\n\tbg-secondary-500\n`\n\nconst FrontmatterWrapper = tw.div`\n\tflex\n\tjustify-between\n\talign-middle\n`\n\nconst PostTitle = tw.h1`\n\tfont-display\n\tfont-bold\n\ttext-2xl\n\tmr-5\n`\n\nconst PostDate = tw.span`\n\tpy-2\n\tfont-sans\n\ttext-sm\n\ttext-primary-200\n`\n\nconst ThumbnailMiniature = tw.img`\n\tmt-1\n\tmb-3\n\tborder-3\n`\n\nconst PostExcerpt = tw.p`\n\ttext-justify\n\tfont-body\n\ttext-sm\n\ttext-primary-400\n\tp-1\n\toverflow-hidden\n\th-[4rem]\n`\n\nconst PostCard: React.FunctionComponent<PostCardProps> = ({data, type}) => {\n\tconst miniature_query = graphql`\n\t\tquery MiniatureQuery {\n\t\t\tallFile(filter: {relativePath: {regex: \"/thumbnails/\"}}) {\n\t\t\t\tedges {\n\t\t\t\t\tnode {\n\t\t\t\t\t\tabsolutePath\n\t\t\t\t\t\tpublicURL\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t`\n\treturn(\n        <StaticQuery\n          query={miniature_query}\n\t\t  render = {(query_result) => {\n\t\t\tconst miniature_matches = query_result.allFile.edges.map(\n\t\t\t\t(edge: Dictionary<string>) => {\n\t\t\t\t\tif (edge.node.publicURL.includes(data.frontmatter.thumbnail)\n\t\t\t\t\t\t&& edge.node.absolutePath.includes(type)){\n\t\t\t\t\t\t\tconsole.log(edge.node.publicURL)\n\t\t\t\t\t\t\treturn edge.node.publicURL\n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\t).filter( Boolean )\n\t\t\treturn(\n\t\t\t\t<CardWrapper to={`/posts/${data.slug}`}>\n\t\t\t\t\t<FrontmatterWrapper>\n\t\t\t\t\t\t<PostTitle>{data.frontmatter.title}</PostTitle>\n\t\t\t\t\t\t<PostDate>{data.frontmatter.date}</PostDate>\n\t\t\t\t\t</FrontmatterWrapper>\n\t\t\t\t\t<ThumbnailMiniature src={miniature_matches[0]}/>\n\t\t\t\t\t<PostExcerpt>{data.excerpt}</PostExcerpt>\n\t\t\t\t</CardWrapper>\n\t\t\t)\n\t\t  }}\n\t\t/>\n\t)\n}\n\nexport default PostCard\n","import PostCard from \"./PostCard\";\n\nexport default PostCard","import SubpageTitle from './SubpageTitle'\n\nexport default SubpageTitle","import React from 'react'\n\nimport tw from 'tailwind-styled-components'\n\nconst SubpageTitle = tw.h1`\n\ttext-4xl\n\tfont-display\n\tunderline\n\tmb-10\n`\n\nexport default SubpageTitle","import React from \"react\"\nimport { graphql, StaticQuery } from \"gatsby\"\n\nimport CardsWrapper from \"@components/CardsWrapper\"\nimport { Dictionary } from \"@src/types\"\nimport PostCard from \"@components/PostCard\" \nimport PageWrapper from \"@components/PageWrapper\" \nimport SubpageTitle from \"@components/SubpageTitle\"\n\nconst posts_query = graphql`\n  query ProjectsQuery {\n    allMdx(\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: {fileAbsolutePath: {regex: \"/\\/projects\\//\"}}\n    ) {\n      nodes {\n        id\n        excerpt(pruneLength: 250)\n        frontmatter {\n          title\n          date(formatString: \"YYYY MMMM Do\")\n          thumbnail\n          gallery\n          techs\n        }\n        slug\n      }\n    }\n  }\n`\n\nconst PostsPage = () => {\n\treturn(\n    <>\n      <PageWrapper>\n        <SubpageTitle>Posts</SubpageTitle>\n        <CardsWrapper>\n          <StaticQuery\n            query={posts_query}\n            render={(query_result: Dictionary<string>) => {\n              const posts = query_result.allMdx.nodes\n              return(\n                posts.map((post: Dictionary<string>) => <PostCard data={post} key={post.id} type=\"projects\"/>)\n              )\n            }}\n          />\n        </CardsWrapper>\n      </PageWrapper>\n    </>\n\t)\n} \n\nexport default PostsPage\n"],"names":["CardsWrapperLayout","tw","_templateObject","children","React","CardWrapper","Link","FrontmatterWrapper","_templateObject2","PostTitle","_templateObject3","PostDate","_templateObject4","ThumbnailMiniature","_templateObject5","PostExcerpt","_templateObject6","data","type","StaticQuery","query","render","query_result","miniature_matches","allFile","edges","map","edge","node","publicURL","includes","frontmatter","thumbnail","absolutePath","console","log","filter","Boolean","to","slug","title","date","src","excerpt","PageWrapper","SubpageTitle","CardsWrapper","allMdx","nodes","post","PostCard","key","id"],"sourceRoot":""}